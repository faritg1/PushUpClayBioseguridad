// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(ContextSecuritydb))]
    [Migration("20231211152409_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Domain.Entities.Categoriapersona", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NombreCategoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("categoriapersona", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("IdDeparFk")
                        .HasColumnType("int");

                    b.Property<string>("NombreCiudad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdDeparFk" }, "FkDepar");

                    b.ToTable("ciudad", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Contactopersona", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdPersonaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTpContactoFk")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPersonaFk" }, "FkPersonaC");

                    b.HasIndex(new[] { "IdTpContactoFk" }, "FkTpContacto");

                    b.HasIndex(new[] { "Descripcion" }, "UqCtPersona")
                        .IsUnique();

                    b.ToTable("contactopersona", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Contrato", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaContrato")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaFin")
                        .HasColumnType("date");

                    b.Property<int>("IdClienteFk")
                        .HasColumnType("int");

                    b.Property<int>("IdEmpleadoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdEstadoFk")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdClienteFk" }, "FkCliente");

                    b.HasIndex(new[] { "IdEmpleadoFk" }, "FkEmpleado");

                    b.HasIndex(new[] { "IdEstadoFk" }, "FkEstado");

                    b.ToTable("contrato", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("IdPaisFk")
                        .HasColumnType("int");

                    b.Property<string>("NombreDepar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPaisFk" }, "FkPais");

                    b.ToTable("departamento", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Direccionpersona", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdPersonaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTpDireccionFk")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPersonaFk" }, "FkPersona");

                    b.HasIndex(new[] { "IdTpDireccionFk" }, "FkTpDireccion");

                    b.ToTable("direccionpersona", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Estado", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("estado", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pai", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NombrePais")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("pais", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaReg")
                        .HasColumnType("date");

                    b.Property<int>("IdCategoriaP")
                        .HasColumnType("int");

                    b.Property<int>("IdCiudadFk")
                        .HasColumnType("int");

                    b.Property<int>("IdPerUq")
                        .HasColumnType("int");

                    b.Property<int>("IdTpPersonaFk")
                        .HasColumnType("int");

                    b.Property<string>("NombrePersona")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCategoriaP" }, "FkCatP");

                    b.HasIndex(new[] { "IdCiudadFk" }, "FkCiudad");

                    b.HasIndex(new[] { "IdTpPersonaFk" }, "FkTpPer");

                    b.HasIndex(new[] { "IdPerUq" }, "UqPer")
                        .IsUnique();

                    b.ToTable("persona", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Tipocontacto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipocontacto", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Tipodireccion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipodireccion", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Tipopersona", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipopersona", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Turno", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("HoraTurNot")
                        .HasColumnType("time")
                        .HasColumnName("HoraTurNOT");

                    b.Property<TimeOnly>("HoraTurnoF")
                        .HasColumnType("time");

                    b.Property<string>("NombreTurno")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("turno", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.HasOne("Domain.Entities.Departamento", "IdDeparFkNavigation")
                        .WithMany("Ciudads")
                        .HasForeignKey("IdDeparFk")
                        .IsRequired()
                        .HasConstraintName("FkDepar");

                    b.Navigation("IdDeparFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Contactopersona", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "IdPersonaFkNavigation")
                        .WithMany("Contactopersonas")
                        .HasForeignKey("IdPersonaFk")
                        .IsRequired()
                        .HasConstraintName("FkPersonaC");

                    b.HasOne("Domain.Entities.Tipocontacto", "IdTpContactoFkNavigation")
                        .WithMany("Contactopersonas")
                        .HasForeignKey("IdTpContactoFk")
                        .IsRequired()
                        .HasConstraintName("FkTpContacto");

                    b.Navigation("IdPersonaFkNavigation");

                    b.Navigation("IdTpContactoFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Contrato", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "IdClienteFkNavigation")
                        .WithMany("ContratoIdClienteFkNavigations")
                        .HasForeignKey("IdClienteFk")
                        .IsRequired()
                        .HasConstraintName("FkCliente");

                    b.HasOne("Domain.Entities.Persona", "IdEmpleadoFkNavigation")
                        .WithMany("ContratoIdEmpleadoFkNavigations")
                        .HasForeignKey("IdEmpleadoFk")
                        .IsRequired()
                        .HasConstraintName("FkEmpleado");

                    b.HasOne("Domain.Entities.Estado", "IdEstadoFkNavigation")
                        .WithMany("Contratos")
                        .HasForeignKey("IdEstadoFk")
                        .IsRequired()
                        .HasConstraintName("FkEstado");

                    b.Navigation("IdClienteFkNavigation");

                    b.Navigation("IdEmpleadoFkNavigation");

                    b.Navigation("IdEstadoFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.HasOne("Domain.Entities.Pai", "IdPaisFkNavigation")
                        .WithMany("Departamentos")
                        .HasForeignKey("IdPaisFk")
                        .IsRequired()
                        .HasConstraintName("FkPais");

                    b.Navigation("IdPaisFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Direccionpersona", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "IdPersonaFkNavigation")
                        .WithMany("Direccionpersonas")
                        .HasForeignKey("IdPersonaFk")
                        .IsRequired()
                        .HasConstraintName("FkPersona");

                    b.HasOne("Domain.Entities.Tipodireccion", "IdTpDireccionFkNavigation")
                        .WithMany("Direccionpersonas")
                        .HasForeignKey("IdTpDireccionFk")
                        .IsRequired()
                        .HasConstraintName("FkTpDireccion");

                    b.Navigation("IdPersonaFkNavigation");

                    b.Navigation("IdTpDireccionFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.HasOne("Domain.Entities.Categoriapersona", "IdCategoriaPNavigation")
                        .WithMany("Personas")
                        .HasForeignKey("IdCategoriaP")
                        .IsRequired()
                        .HasConstraintName("FkCatP");

                    b.HasOne("Domain.Entities.Ciudad", "IdCiudadFkNavigation")
                        .WithMany("Personas")
                        .HasForeignKey("IdCiudadFk")
                        .IsRequired()
                        .HasConstraintName("FkCiudad");

                    b.HasOne("Domain.Entities.Tipopersona", "IdTpPersonaFkNavigation")
                        .WithMany("Personas")
                        .HasForeignKey("IdTpPersonaFk")
                        .IsRequired()
                        .HasConstraintName("FkTpPer");

                    b.Navigation("IdCategoriaPNavigation");

                    b.Navigation("IdCiudadFkNavigation");

                    b.Navigation("IdTpPersonaFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Categoriapersona", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.Navigation("Ciudads");
                });

            modelBuilder.Entity("Domain.Entities.Estado", b =>
                {
                    b.Navigation("Contratos");
                });

            modelBuilder.Entity("Domain.Entities.Pai", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.Navigation("Contactopersonas");

                    b.Navigation("ContratoIdClienteFkNavigations");

                    b.Navigation("ContratoIdEmpleadoFkNavigations");

                    b.Navigation("Direccionpersonas");
                });

            modelBuilder.Entity("Domain.Entities.Tipocontacto", b =>
                {
                    b.Navigation("Contactopersonas");
                });

            modelBuilder.Entity("Domain.Entities.Tipodireccion", b =>
                {
                    b.Navigation("Direccionpersonas");
                });

            modelBuilder.Entity("Domain.Entities.Tipopersona", b =>
                {
                    b.Navigation("Personas");
                });
#pragma warning restore 612, 618
        }
    }
}
